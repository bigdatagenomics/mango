#!/usr/bin/env bash
#
# Licensed to Big Data Genomics (BDG) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The BDG licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# usage: mango-submit [<spark-args> --] <mango-args>

set -e

# Split args into Spark and mango args
DD=False  # DD is "double dash"
PRE_DD=()
POST_DD=()
for ARG in "$@"; do
  shift
  if [[ $ARG == "--" ]]; then
    DD=True
    POST_DD=( "$@" )
    break
  fi
  PRE_DD+=("$ARG")
done

if [[ $DD == True ]]; then
  SPARK_ARGS="${PRE_DD[@]}"
  MANGO_ARGS="${POST_DD[@]}"
else
  SPARK_ARGS=()
  MANGO_ARGS="${PRE_DD[@]}"
fi

# does the user have MANGO_OPTS set? if yes, then warn
if [[ $DD == False && -n "$MANGO_OPTS" ]]; then
    echo "WARNING: Passing Spark arguments via MANGO_OPTS was recently removed."
    echo "Run mango-submit instead as mango-submit <spark-args> -- <mango-args>"
fi

# Figure out where mango is installed
SCRIPT_DIR="$(cd `dirname $0`/..; pwd)"

# Get list of required jars for mango
MANGO_JARS=$("$SCRIPT_DIR"/bin/compute-mango-jars.sh)

# Split out the CLI jar, since it will be passed to Spark as the "primary resource".
MANGO_CLI_JAR=${MANGO_JARS##*,}
MANGO_JARS=$(echo "$MANGO_JARS" | rev | cut -d',' -f2- | rev)

# append mango_JARS to the --jars option, if any
SPARK_ARGS=$("$SCRIPT_DIR"/bin/append_to_option.py , --jars $MANGO_JARS $SPARK_ARGS)

# Find spark-submit script
if [ -z "$SPARK_HOME" ]; then
  SPARK_SUBMIT=$(which spark-submit)
else
  SPARK_SUBMIT="$SPARK_HOME"/bin/spark-submit
fi
if [ -z "$SPARK_SUBMIT" ]; then
  echo "SPARK_HOME not set and spark-submit not on PATH; Aborting."
  exit 1
fi
echo "Using SPARK_SUBMIT=$SPARK_SUBMIT"

# exports
export SPARK_ARGS=$SPARK_ARGS
export MANGO_MAIN_JAR=$MANGO_CLI_JAR
export MANGO_ARGS=$MANGO_ARGS

# generate application key
APP_KEY=$(openssl rand -base64 15)
export APPLICATION_SECRET=$APP_KEY

SCRIPT_DIR="$(cd `dirname $0`/..; pwd)"

# get version of mango from maven. This will be used to fetch the
# most recently installed mango-play distribution
MANGO_VERSION=`echo -e 'setns x=http://maven.apache.org/POM/4.0.0\ncat /x:project/x:version/text()' | xmllint --shell $SCRIPT_DIR/pom.xml | grep -v /`

classpath="$SCRIPT_DIR/mango-play-$MANGO_VERSION/lib/*"

# Get list of provided jars for spark
SPARK_JARS=$("$SCRIPT_DIR"/bin/compute-spark-jars.sh)

# modify classpath to include spark and hadoop
# spark must come second do to dependency conflicts
classpath="$classpath:$SPARK_JARS"

# this is copied from playframework's autogenerated start script
exec java $* -cp "$classpath" play.core.server.NettyServer $scriptdir
